import { createTool } from '@mastra/core/tools';
import { z } from 'zod';
import { E2BSandboxManager } from '../../lib/e2b-sandbox-manager.js';

/**
 * Write File Tool
 * Creates or overwrites a file in the E2B sandbox
 */
export const writeFileTool = createTool({
  id: 'write_file',
  description: `Write a file to the E2B sandbox filesystem.

  Use this tool when:
  - You need to create a new file for code execution
  - You want to save data or configuration files
  - Building multi-file projects
  - Creating data files (CSV, JSON, etc.) for processing

  The file will be available in subsequent code executions in the same session.`,

  inputSchema: z.object({
    path: z.string().describe('The file path where to write (e.g., "/home/user/script.py")'),
    content: z.string().describe('The content to write to the file'),
  }),

  outputSchema: z.object({
    success: z.boolean().describe('Whether the operation succeeded'),
    path: z.string().describe('The path where the file was written'),
    message: z.string().describe('Success or error message'),
  }),

  execute: async ({ context }) => {
    const { path, content } = context;

    // Check if E2B API key is configured
    const e2bApiKey = process.env.E2B_API_KEY;
    if (!e2bApiKey) {
      return {
        success: false,
        path,
        message: 'E2B_API_KEY not configured. Please set up E2B in your environment.',
      };
    }

    try {
      const sandboxManager = E2BSandboxManager.getInstance({
        apiKey: e2bApiKey,
        timeoutMs: parseInt(process.env.E2B_TIMEOUT_MS || '300000', 10),
      });

      return await sandboxManager.writeFile(path, content);
    } catch (error) {
      return {
        success: false,
        path,
        message: error instanceof Error ? error.message : 'Unknown error writing file',
      };
    }
  },
});

/**
 * Write Multiple Files Tool
 * Creates or overwrites multiple files in the E2B sandbox
 */
export const writeMultipleFilesTool = createTool({
  id: 'write_multiple_files',
  description: `Write multiple files to the E2B sandbox filesystem at once.

  Use this tool when:
  - Creating a multi-file project structure
  - Setting up a project with multiple modules
  - Creating test files along with main code
  - Setting up configuration files

  More efficient than calling write_file multiple times.`,

  inputSchema: z.object({
    files: z
      .array(
        z.object({
          path: z.string().describe('The file path'),
          data: z.string().describe('The file content'),
        })
      )
      .describe('Array of files to write'),
  }),

  outputSchema: z.object({
    success: z.boolean().describe('Whether all files were written successfully'),
    message: z.string().describe('Success or error message'),
    paths: z.array(z.string()).describe('Paths where files were written'),
  }),

  execute: async ({ context }) => {
    const { files } = context;

    // Check if E2B API key is configured
    const e2bApiKey = process.env.E2B_API_KEY;
    if (!e2bApiKey) {
      return {
        success: false,
        message: 'E2B_API_KEY not configured. Please set up E2B in your environment.',
        paths: [],
      };
    }

    try {
      const sandboxManager = E2BSandboxManager.getInstance({
        apiKey: e2bApiKey,
        timeoutMs: parseInt(process.env.E2B_TIMEOUT_MS || '300000', 10),
      });

      return await sandboxManager.writeFiles(files);
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Unknown error writing files',
        paths: [],
      };
    }
  },
});

/**
 * Read File Tool
 * Reads a file from the E2B sandbox
 */
export const readFileTool = createTool({
  id: 'read_file',
  description: `Read a file from the E2B sandbox filesystem.

  Use this tool when:
  - You need to check the contents of a file you created
  - Verifying code that was written
  - Reading output files generated by code execution
  - Inspecting data files

  Only works for files that exist in the current sandbox session.`,

  inputSchema: z.object({
    path: z.string().describe('The file path to read (e.g., "/home/user/output.txt")'),
  }),

  outputSchema: z.object({
    success: z.boolean().describe('Whether the operation succeeded'),
    content: z.string().optional().describe('The file content'),
    message: z.string().describe('Success or error message'),
  }),

  execute: async ({ context }) => {
    const { path } = context;

    // Check if E2B API key is configured
    const e2bApiKey = process.env.E2B_API_KEY;
    if (!e2bApiKey) {
      return {
        success: false,
        message: 'E2B_API_KEY not configured. Please set up E2B in your environment.',
      };
    }

    try {
      const sandboxManager = E2BSandboxManager.getInstance({
        apiKey: e2bApiKey,
        timeoutMs: parseInt(process.env.E2B_TIMEOUT_MS || '300000', 10),
      });

      return await sandboxManager.readFile(path);
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Unknown error reading file',
      };
    }
  },
});

/**
 * List Files Tool
 * Lists files in a directory in the E2B sandbox
 */
export const listFilesTool = createTool({
  id: 'list_files',
  description: `List files in a directory in the E2B sandbox filesystem.

  Use this tool when:
  - You want to see what files exist in the sandbox
  - Checking if a file was created successfully
  - Exploring the sandbox directory structure
  - Verifying file organization

  Useful for understanding the current state of the sandbox filesystem.`,

  inputSchema: z.object({
    path: z.string().default('/home/user').describe('The directory path to list (defaults to /home/user)'),
  }),

  outputSchema: z.object({
    success: z.boolean().describe('Whether the operation succeeded'),
    files: z.array(z.string()).optional().describe('List of file names in the directory'),
    message: z.string().describe('Success or error message'),
  }),

  execute: async ({ context }) => {
    const { path } = context;

    // Check if E2B API key is configured
    const e2bApiKey = process.env.E2B_API_KEY;
    if (!e2bApiKey) {
      return {
        success: false,
        message: 'E2B_API_KEY not configured. Please set up E2B in your environment.',
      };
    }

    try {
      const sandboxManager = E2BSandboxManager.getInstance({
        apiKey: e2bApiKey,
        timeoutMs: parseInt(process.env.E2B_TIMEOUT_MS || '300000', 10),
      });

      return await sandboxManager.listFiles(path);
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Unknown error listing files',
      };
    }
  },
});
